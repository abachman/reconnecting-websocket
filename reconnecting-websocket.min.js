// https://github.com/abachman/reconnecting-websocket
(function(e,n){if(typeof define==="function"&&define.amd){define([],n)}else if(typeof module!=="undefined"&&module.exports){module.exports=n()}else{e.ReconnectingWebSocket=n()}})(this,function(){function e(n,t){this.debug=false;this.reconnectInterval=1e3;this.reconnectDecay=1.5;this.reconnectAttempts=0;this.timeoutInterval=2e3;this.url=n;this.readyState=WebSocket.CONNECTING;this.protocol=null;var o=this;var c;var i=false;var s=false;var r=document.createElement("div");r.addEventListener("open",function(e){o.onopen(e)});r.addEventListener("close",function(e){o.onclose(e)});r.addEventListener("connecting",function(e){o.onconnecting(e)});r.addEventListener("message",function(e){o.onmessage(e)});r.addEventListener("error",function(e){o.onerror(e)});this.addEventListener=r.addEventListener.bind(r);this.removeEventListener=r.removeEventListener.bind(r);this.dispatchEvent=r.dispatchEvent.bind(r);function d(u){c=new WebSocket(n,t||[]);if(!u){r.dispatchEvent(new Event("connecting"))}if(o.debug||e.debugAll){console.debug("ReconnectingWebSocket","attempt-connect",n)}var a=c;var l=setTimeout(function(){if(o.debug||e.debugAll){console.debug("ReconnectingWebSocket","connection-timeout",n)}s=true;a.close();s=false},o.timeoutInterval);c.onopen=function(t){clearTimeout(l);if(o.debug||e.debugAll){console.debug("ReconnectingWebSocket","onopen",n)}o.protocol=c.protocol;o.readyState=WebSocket.OPEN;o.reconnectAttempts=0;var i=new Event("open");i.isReconnect=u;u=false;r.dispatchEvent(i)};c.onclose=function(t){clearTimeout(l);c=null;if(i){o.readyState=WebSocket.CLOSED;o.onclose(t);r.dispatchEvent(new Event("close"))}else{o.readyState=WebSocket.CONNECTING;r.dispatchEvent(new Event("connecting"));if(!u&&!s){if(o.debug||e.debugAll){console.debug("ReconnectingWebSocket","onclose",n)}r.dispatchEvent(new Event("close"))}setTimeout(function(){o.reconnectAttempts++;d(true)},o.reconnectInterval*Math.pow(o.reconnectDecay,o.reconnectAttempts))}};c.onmessage=function(t){if(o.debug||e.debugAll){console.debug("ReconnectingWebSocket","onmessage",n,t.data)}var c=new Event("message");c.data=t.data;r.dispatchEvent(c)};c.onerror=function(t){if(o.debug||e.debugAll){console.debug("ReconnectingWebSocket","onerror",n,t)}r.dispatchEvent(new Event("event"))}}d(false);this.send=function(t){if(c){if(o.debug||e.debugAll){console.debug("ReconnectingWebSocket","send",n,t)}return c.send(t)}else{throw"INVALID_STATE_ERR : Pausing to reconnect websocket"}};this.close=function(e,n){i=true;if(c){c.close(e,n)}};this.refresh=function(){if(c){c.close()}}}e.prototype.onopen=function(e){};e.prototype.onclose=function(e){};e.prototype.onconnecting=function(e){};e.prototype.onmessage=function(e){};e.prototype.onerror=function(e){};e.debugAll=false;e.CONNECTING=WebSocket.CONNECTING;e.OPEN=WebSocket.OPEN;e.CLOSING=WebSocket.CLOSING;e.CLOSED=WebSocket.CLOSED;return e});